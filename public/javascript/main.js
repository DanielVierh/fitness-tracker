/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scss/style.scss":
/*!*****************************!*\
  !*** ./src/scss/style.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://project-template/./src/scss/style.scss?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/script.js */ \"./src/js/script.js\");\n/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_script_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _scss_style_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scss/style.scss */ \"./src/scss/style.scss\");\n\r\n\r\n\n\n//# sourceURL=webpack://project-template/./src/index.js?");

/***/ }),

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("/////////////////////////////////////\r\n// * Variablen\r\n/////////////////////////////////////\r\n//* ANCHOR - Elemente\r\n\r\nconst exercise_container = document.getElementById('exercise_container');\r\nconst btn_add = document.getElementById('btn_add');\r\nconst btn_saveExercise = document.getElementById('btn_saveExercise');\r\nconst modal_edit = document.getElementById(\"modal_edit\");\r\nconst modal_exercise = document.getElementById(\"modal_exercise\");\r\nconst modal_settings = document.getElementById(\"modal_settings\");\r\nconst btn_home = document.getElementById(\"btn_home\");\r\nconst btn_open_edit = document.getElementById(\"btn_open_edit\");\r\nconst modal_close_btn = document.querySelectorAll('.modal_close_btn');\r\nconst lbl_trainingsname = document.getElementById('lbl_trainingsname');\r\nconst lbl_weight = document.getElementById('lbl_weight');\r\nconst lbl_sets = document.getElementById('lbl_sets');\r\nconst lbl_repeats = document.getElementById('lbl_repeats');\r\nconst lbl_number = document.getElementById('lbl_number');\r\nconst lbl_seatsettings = document.getElementById('lbl_seatsettings');\r\nconst lbl_muscleselect = document.getElementById('lbl_muscleselect');\r\nconst lbl_donesets = document.getElementById('lbl_donesets');\r\nconst btn_trackSport = document.getElementById('btn_trackSport');\r\nconst lbl_trainingsarea = document.getElementById('lbl_trainingsarea');\r\nconst bdy = document.getElementById('bdy');\r\nconst btn_finish = document.getElementById('btn_finish');\r\nconst btn_show_trainings = document.getElementById('btn_show_trainings');\r\nconst modal_trainings = document.getElementById('modal_trainings');\r\nconst trainings_wrapper = document.getElementById('trainings_wrapper');\r\nconst last_training = document.getElementById('last_training');\r\nconst btn_edit = document.getElementById('btn_edit');\r\nconst exercise_table = document.getElementById('exercise_table');\r\nconst lbl_exerciseRepeats = document.getElementById('lbl_exerciseRepeats');\r\nconst lbl_exerciseSets = document.getElementById('lbl_exerciseSets');\r\nconst btn_gotoSolvedTrainings = document.getElementById('btn_gotoSolvedTrainings');\r\nlet inpExercise_Name = document.getElementById('inpExercise_Name');\r\nlet inpExercise_Weight = document.getElementById('inpExercise_Weight');\r\nlet inpExercise_Sets = document.getElementById('inpExercise_Sets');\r\nlet inpExercise_Repeats = document.getElementById('inpExercise_Repeats');\r\nlet inpExercise_number = document.getElementById('inpExercise_number');\r\nlet inpExercise_seatSettings = document.getElementById('inpExercise_seatSettings');\r\nlet muscle_select = document.getElementById('muscle_select');\r\nlet training_Area = document.getElementById('training_Area');\r\n\r\n\r\n\r\n\r\n\r\n//* ANCHOR -  Variablen\r\nlet training_running = false;\r\nlet training_place_filter = '';\r\nlet selected_Exercise;\r\nlet is_edit = false;\r\n\r\n//*  Saveobj\r\nlet save_Object = {\r\n    training_is_running: false,\r\n    training_start: '',\r\n    exercises: [],\r\n    trainings: [],\r\n    current_training: [],\r\n    training_place_filter: '',\r\n};\r\n\r\n\r\n\r\n/////////////////////////////////////\r\n// * ANCHOR - Init\r\n/////////////////////////////////////\r\nwindow.onload = () => {\r\n    load_local_storage();\r\n\r\n    setInterval(() => {\r\n        observer();\r\n    }, 1000);\r\n}\r\n\r\n\r\n//########################################\r\n//* ANCHOR - Load Local Storage\r\n//########################################\r\nfunction load_local_storage() {\r\n    if (localStorage.getItem('stored_fitness_saveobj') != '') {\r\n        try {\r\n            save_Object = JSON.parse(localStorage.getItem('stored_fitness_saveobj'));\r\n        } catch (error) {\r\n            console.log('Main Error', error);\r\n            save_Object = {\r\n                training_is_running: false,\r\n                training_start: '',\r\n                exercises: [],\r\n                trainings: [],\r\n                current_training: [],\r\n                training_place_filter: '',\r\n            };\r\n            save_into_storage();\r\n        }\r\n\r\n        try {\r\n            training_running = save_Object.training_is_running;\r\n        } catch (error) {\r\n            console.log('training_running', error);\r\n        }\r\n\r\n        try {\r\n            training_place_filter = save_Object.training_place_filter;\r\n        } catch (error) {\r\n            console.log('training_place_filter', error);\r\n        }\r\n\r\n        try {\r\n            const last = save_Object.trainings.length - 1;\r\n            last_training.innerHTML = `${save_Object.trainings[last].training_date} -- ${save_Object.trainings[last].duration}`;\r\n        } catch (error) {\r\n            console.log('last_training', error);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            //* Render func\r\n            prepare_render_exercise();\r\n        }, 500);\r\n\r\n        try {\r\n            fill_chart();\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n    if (save_Object === null) {\r\n        save_Object = {\r\n            training_is_running: false,\r\n            training_start: '',\r\n            exercises: [],\r\n            trainings: [],\r\n            current_training: [],\r\n            training_place_filter: '',\r\n        };\r\n        save_into_storage();\r\n        console.log('was null');\r\n    }\r\n    console.log('saveobj', save_Object);\r\n}\r\n\r\n//########################################\r\n//* ANCHOR - Render Chart\r\n//########################################\r\nfunction fill_chart() {\r\n    const current_time_stamp = new Date();\r\n    const current_Year = current_time_stamp.getFullYear();\r\n    const training_counter = document.getElementById('training_counter');\r\n\r\n    let jan = 0;\r\n    let feb = 0;\r\n    let mrz = 0;\r\n    let apr = 0;\r\n    let mai = 0;\r\n    let jun = 0;\r\n    let jul = 0;\r\n    let aug = 0;\r\n    let sep = 0;\r\n    let okt = 0;\r\n    let nov = 0;\r\n    let dez = 0;\r\n    let last_day = '';\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < save_Object.trainings.length; i++) {\r\n        const solved_Date = save_Object.trainings[i].training_date;\r\n        const solved_year = splitVal(solved_Date, '.', 2);\r\n        const solved_month = splitVal(solved_Date, '.', 1);\r\n        const solved_day = splitVal(solved_Date, '.', 0);\r\n        const day_Month = solved_day + solved_month;\r\n\r\n        if (solved_year == current_Year && day_Month !== last_day) {\r\n            last_day = day_Month;\r\n            sum ++;\r\n\r\n            switch (solved_month) {\r\n                case '01':\r\n                    jan++;\r\n                    break;\r\n                case '02':\r\n                    feb++;\r\n                    break;\r\n                case '03':\r\n                    mrz++;\r\n                    break;\r\n                case '04':\r\n                    apr++;\r\n                    break;\r\n                case '05':\r\n                    mai++;\r\n                    break;\r\n                case '06':\r\n                    jun++;\r\n                    break;\r\n                case '07':\r\n                    jul++;\r\n                    break;\r\n                case '08':\r\n                    aug++;\r\n                    break;\r\n                case '09':\r\n                    sep++;\r\n                    break;\r\n                case '10':\r\n                    okt++;\r\n                    break;\r\n                case '11':\r\n                    nov++;\r\n                    break;\r\n                case '12':\r\n                    dez++;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const month_arr = [jan, feb, mrz, apr, mai, jun, jul, aug, sep, okt, nov, dez];\r\n\r\n    //* find max val;\r\n    let max_per_month = 0;\r\n    month_arr.forEach((month) => {\r\n        if (month > max_per_month) {\r\n            max_per_month = month;\r\n        }\r\n    })\r\n\r\n    //* Render Col\r\n    // max = 100% aka 350px\r\n    let left = 2;\r\n    month_arr.forEach((month, index) => {\r\n        const value_in_pixel = ((month * 350) / max_per_month);\r\n        const col = `chart_col_${index + 1}`;\r\n        document.getElementById(col).style.height = `${value_in_pixel}px`;\r\n        document.getElementById(col).style.left = `${left}%`;\r\n        document.getElementById(col).innerHTML = document.getElementById(col).innerHTML + `</br> ${month}`;\r\n        left = left += 8;\r\n    })\r\n\r\n    training_counter.innerHTML = `Bereits <span class=\"training-sum-number\">${sum}</span> Trainingstag(e) im Jahr ${current_Year}`;\r\n}\r\n\r\n//########################################\r\n//* ANCHOR - Split Function\r\n//########################################\r\n\r\nfunction splitVal(val, marker, pos) {\r\n    const elem = val.split(marker);\r\n    const retVal = elem[pos];\r\n    return retVal;\r\n}\r\n\r\n//########################################\r\n//* ANCHOR - Save to local Storage\r\n//########################################\r\nfunction save_into_storage() {\r\n    localStorage.setItem('stored_fitness_saveobj', JSON.stringify(save_Object));\r\n}\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Class for training\r\n/////////////////////////////////////\r\nclass Training {\r\n    constructor(training_date, duration, exercises) {\r\n        this.training_date = training_date;\r\n        this.duration = duration;\r\n        this.exercises = exercises;\r\n    }\r\n}\r\n/////////////////////////////////////\r\n//* ANCHOR - Class for Exercise\r\n/////////////////////////////////////\r\nclass Exercise {\r\n    constructor(exercise_id = rnd_id(), name = 'Leere Übung', weight = '0', sets = 0, repeats = 0, machineNumber = '-', machine_seat_settings = '-', musclegroup = '-', trainingsplace = '-', solved_sets = 0) {\r\n        this.exercise_id = exercise_id;\r\n        this.name = name;\r\n        this.weight = weight;\r\n        this.sets = sets;\r\n        this.repeats = repeats;\r\n        this.machineNumber = machineNumber;\r\n        this.machine_seat_settings = machine_seat_settings;\r\n        this.musclegroup = musclegroup;\r\n        this.trainingsplace = trainingsplace;\r\n        this.solved_sets = solved_sets;\r\n    }\r\n\r\n    show_exercise_in_console() {\r\n        console.log(`%c ID=${this.exercise_id}\r\n        Name = ${this.name} \\n\r\n        Gewicht = ${this.weight} \\n\r\n        Sätze = ${this.sets} \\n\r\n        Wdh = ${this.repeats} \\n\r\n        Nummer = ${this.machineNumber} \\n\r\n        Geräteeinstellungen = ${this.machine_seat_settings} \\n\r\n        Muskelgruppe = ${this.musclegroup} \\n\r\n        Trainingsort = ${this.trainingsplace} \\n\r\n        SolvedSets = ${this.solved_sets}`, 'color: green;');\r\n    }\r\n\r\n}\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Class for Modal\r\n/////////////////////////////////////\r\n\r\nclass Modal {\r\n\r\n    static modal_list = [modal_edit, modal_exercise, modal_settings, modal_trainings];\r\n\r\n    static open_modal(modal) {\r\n        this.close_all_modals();\r\n        modal.classList.add('active');\r\n    }\r\n\r\n    static close_all_modals() {\r\n        for (let i = 0; i < this.modal_list.length; i++) {\r\n            this.modal_list[i].classList.remove('active');\r\n        }\r\n    }\r\n}\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Random ID Creator\r\n/////////////////////////////////////\r\nfunction rnd_id() {\r\n    const rndStuff = [\r\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\r\n        'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '$', '?', '1', '2', '3', '4', '8', '7',\r\n        '6', '5', '9', '0', '#',\r\n    ];\r\n    let key = '';\r\n    for (let i = 1; i <= 16; i++) {\r\n        key += rndStuff[parseInt(Math.random() * rndStuff.length)];\r\n    }\r\n    return key;\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Render exercises\r\n/////////////////////////////////////\r\n\r\nfunction prepare_render_exercise() {\r\n    let home_array = [];\r\n    let fitti_array = [];\r\n    let combo_array = [];\r\n    const srcArray = save_Object.exercises;\r\n\r\n    srcArray.forEach((exercise) => {\r\n        if(exercise.trainingsplace === 'Heimtraining') {\r\n            home_array.push(exercise);\r\n        }\r\n        if(exercise.trainingsplace === 'Kombo' || exercise.trainingsplace === '') {\r\n            combo_array.push(exercise);\r\n        }\r\n        if(exercise.trainingsplace === 'Fitnessstudio') {\r\n            fitti_array.push(exercise);\r\n        }\r\n    });\r\n\r\n    render_exercises(home_array,'Heimtraining');\r\n    render_exercises(combo_array, '');\r\n    render_exercises(fitti_array,'Fitnessstudio');\r\n}\r\n\r\nfunction render_exercises(exerc_array, label) {\r\n    try {\r\n        if(label.length > 1) {\r\n            let exercise_place_label = document.createElement('h3');\r\n            exercise_place_label.innerHTML = label;\r\n            exercise_place_label.classList.add('exercise-place-label')\r\n            exercise_container.appendChild(exercise_place_label);\r\n        }\r\n\r\n        for (let i = 0; i < exerc_array.length; i++) {\r\n            let exercisebtn = document.createElement('div');\r\n            exercisebtn.classList.add('exercise');\r\n            let exerciseName = exerc_array[i].name;\r\n            console.log('exerc_array', exerc_array);\r\n            if(exerc_array[i].trainingsplace == \"Fitnessstudio\") {\r\n                exerciseName = `Nr.${exerc_array[i].machineNumber} - ` +  exerc_array[i].name;\r\n            }\r\n            try {\r\n                const currentSet = save_Object.current_training[`${indexOfExercise(exerc_array[i], save_Object.current_training)}`].solved_sets;\r\n                exerciseName = `${exerciseName} (${currentSet}/${exerc_array[i].sets}) <span style=\"margin: 0 10px\"> </span><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-patch-check-fill\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01zm.287 5.984-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708\"/>\r\n              </svg>`;\r\n                if (currentSet >= exerc_array[i].sets) {\r\n                    exercisebtn.classList.add('solved');\r\n                } else {\r\n                    exercisebtn.classList.add('half-solved');\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            exercisebtn.innerHTML = exerciseName;\r\n            exercisebtn.id = exerc_array[i].exercise_id;\r\n            exercisebtn.addEventListener('click', () => {\r\n                selected_Exercise = exerc_array[i];\r\n                open_exercise();\r\n            })\r\n\r\n            exercise_container.appendChild(exercisebtn);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Save new Exercise\r\n/////////////////////////////////////\r\nbtn_saveExercise.addEventListener('click', () => {\r\n\r\n    if (inpExercise_Name.value === '') {\r\n        return\r\n    }\r\n    if (inpExercise_Weight.value === '') {\r\n        inpExercise_Weight.value = 0;\r\n    }\r\n    if (inpExercise_Sets.value === '') {\r\n        inpExercise_Sets.value = 0;\r\n    }\r\n    if (inpExercise_Repeats.value === '') {\r\n        inpExercise_Repeats.value = 0;\r\n    }\r\n    if (inpExercise_number.value === '') {\r\n        inpExercise_number.value = '-'\r\n    }\r\n    if (inpExercise_seatSettings.value === '') {\r\n        inpExercise_seatSettings.value = '-'\r\n    }\r\n    if (muscle_select.value === '') {\r\n        muscle_select.value = '-';\r\n    }\r\n    if (training_Area.value === '') {\r\n        training_Area.value = '-';\r\n    }\r\n\r\n    if (is_edit) {\r\n        selected_Exercise.name = inpExercise_Name.value;\r\n        selected_Exercise.weight = inpExercise_Weight.value;\r\n        selected_Exercise.sets = inpExercise_Sets.value;\r\n        selected_Exercise.repeats = inpExercise_Repeats.value;\r\n        selected_Exercise.machineNumber = inpExercise_number.value;\r\n        selected_Exercise.machine_seat_settings = inpExercise_seatSettings.value;\r\n        selected_Exercise.musclegroup = muscle_select.value;\r\n        selected_Exercise.trainingsplace = training_Area.value;\r\n    } else {\r\n        const newExercise = new Exercise(rnd_id(),\r\n            inpExercise_Name.value,\r\n            inpExercise_Weight.value,\r\n            inpExercise_Sets.value,\r\n            inpExercise_Repeats.value,\r\n            inpExercise_number.value,\r\n            inpExercise_seatSettings.value,\r\n            muscle_select.value,\r\n            training_Area.value,\r\n            0\r\n        );\r\n        save_Object.exercises.push(newExercise);\r\n    }\r\n\r\n    save_into_storage();\r\n    location.reload();\r\n})\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - open Exercise\r\n/////////////////////////////////////\r\nfunction open_exercise() {\r\n    Modal.open_modal(modal_exercise);\r\n    lbl_trainingsname.innerHTML = selected_Exercise.name;\r\n    lbl_weight.innerHTML = `${selected_Exercise.weight} Kg`;\r\n    lbl_sets.innerHTML = `${selected_Exercise.sets}`;\r\n    lbl_repeats.innerHTML = `${selected_Exercise.repeats}`;\r\n    lbl_number.innerHTML = `Nr.${selected_Exercise.machineNumber}`;\r\n    lbl_seatsettings.innerHTML = `${selected_Exercise.machine_seat_settings}`;\r\n    lbl_muscleselect.innerHTML = `${selected_Exercise.musclegroup}`;\r\n    lbl_donesets.innerHTML = `0`;\r\n    try {\r\n        const currentSet = save_Object.current_training[`${indexOfExercise(selected_Exercise, save_Object.current_training)}`].solved_sets;\r\n        lbl_donesets.innerHTML = `${currentSet}`;\r\n    } catch (error) { }\r\n    lbl_trainingsarea.innerHTML = `${selected_Exercise.trainingsplace}`;\r\n\r\n    const trainingamount = save_Object.trainings.length - 1;\r\n    exercise_table.innerHTML = '';\r\n\r\n    for (let i = trainingamount; i > -1; i--) {\r\n        const title = save_Object.trainings[i].training_date;\r\n        const duration = save_Object.trainings[i].duration;\r\n        const exc = save_Object.trainings[i].exercises;\r\n        let only_ecercise;\r\n        let is_in = false;\r\n\r\n\r\n        for (let j = 0; j < exc.length; j++) {\r\n            is_in = false;\r\n            if (exc[j].exercise_id === selected_Exercise.exercise_id) {\r\n                is_in = true;\r\n                only_ecercise = exc[j];\r\n                break;\r\n            }\r\n        }\r\n        if (is_in === true) {\r\n            const tableContainer = createTable(`${title} - ${duration}`, only_ecercise, true);\r\n            exercise_table.appendChild(tableContainer);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Tracking\r\n/////////////////////////////////////\r\nbtn_trackSport.addEventListener('click', () => {\r\n    if (training_running === false) {\r\n\r\n        const decision = window.confirm('Soll ein Training gestartet werden?')\r\n        if (decision) {\r\n            training_running = true;\r\n            //* Training boolean speichern\r\n            save_Object.training_is_running = true;\r\n            //* Training Startzeit ermitteln und speichern\r\n            const training_start_stamp = new Date();\r\n            save_Object.training_start = training_start_stamp;\r\n            //* Set in Training Array speichern\r\n            add_solved_set();\r\n\r\n            // * persistent speichern\r\n            save_into_storage();\r\n\r\n            //TODO -  replace alert\r\n            alert(\"Ein weiterer Satz wurde hinzugefügt\");\r\n            location.reload();\r\n        }\r\n\r\n    } else {\r\n        //* Set in Training Array speichern\r\n        add_solved_set()\r\n\r\n        // * persistent speichern\r\n        save_into_storage();\r\n\r\n        //TODO -  replace alert\r\n        alert(\"Ein weiterer Satz wurde hinzugefügt\");\r\n        location.reload();\r\n    }\r\n})\r\n\r\nfunction add_solved_set() {\r\n    //* Übung in Training Array speichern\r\n    //* Abgleichen ob bereits vorhanden per id match,\r\n    //* wenn vorhanden eins hochzählen\r\n    if (check_exercise_in_currentTraining(selected_Exercise)) {\r\n        let currentSet = save_Object.current_training[`${indexOfExercise(selected_Exercise, save_Object.current_training)}`].solved_sets;\r\n        let new_set_amount = currentSet += 1;\r\n        save_Object.current_training[`${indexOfExercise(selected_Exercise, save_Object.current_training)}`].solved_sets = new_set_amount;\r\n        lbl_donesets.innerHTML = `${new_set_amount}`;\r\n    } else {\r\n        //* wenn nein, in das Array übertragen und eins hochzählen\r\n        let cloned_exercise = Object.assign({}, selected_Exercise);\r\n        cloned_exercise.solved_sets = cloned_exercise.solved_sets += 1;\r\n        save_Object.current_training.push(cloned_exercise);\r\n        lbl_donesets.innerHTML = `${cloned_exercise.solved_sets}`;\r\n    }\r\n}\r\n\r\n\r\nfunction check_exercise_in_currentTraining(exercise) {\r\n    const exerciseId = exercise.exercise_id;\r\n    let is_in_currentTraining = false;\r\n\r\n    for (let i = 0; i < save_Object.current_training.length; i++) {\r\n        if (save_Object.current_training[i].exercise_id === exerciseId) {\r\n            is_in_currentTraining = true;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return is_in_currentTraining;\r\n}\r\n\r\nfunction indexOfExercise(exercise, arr) {\r\n    const exerciseId = exercise.exercise_id;\r\n    let index = -1;\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].exercise_id === exerciseId) {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return index;\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - MinutesDiff\r\n/////////////////////////////////////\r\nfunction minutesDiff(dateTimeValue2, dateTimeValue1) {\r\n    var differenceValue = (dateTimeValue2.getTime() - dateTimeValue1.getTime()) / 1000;\r\n    differenceValue /= 60;\r\n    const rawMinuteTime = Math.abs(Math.round(differenceValue))\r\n    const hour = Math.floor(rawMinuteTime / 60);\r\n    const minutes = Math.floor(rawMinuteTime % 60);\r\n    const time = `${add_zero(hour)}:${add_zero(minutes)}`;\r\n    return time;\r\n}\r\n\r\nfunction add_zero(val) {\r\n    if (val < 10) {\r\n        val = `0${val}`;\r\n    }\r\n    return val;\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Modals\r\n/////////////////////////////////////\r\n\r\nbtn_open_edit.addEventListener('click', () => {\r\n    Modal.open_modal(modal_edit);\r\n    is_edit = false;\r\n});\r\n\r\nbtn_edit.addEventListener('click', () => {\r\n    is_edit = true;\r\n    Modal.open_modal(modal_edit);\r\n    load_exercise_into_edit();\r\n});\r\n\r\n\r\nbtn_add.addEventListener('click', () => {\r\n    Modal.open_modal(modal_edit);\r\n    is_edit = false;\r\n});\r\n\r\nbtn_show_trainings.addEventListener('click', () => {\r\n    Modal.open_modal(modal_trainings);\r\n    render_trainings();\r\n})\r\n\r\nbtn_gotoSolvedTrainings.addEventListener('click', ()=> {\r\n    Modal.open_modal(modal_trainings);\r\n    render_trainings();\r\n    console.log('%c Feffe', `color: green; font-weight: bold; font-size: 20px;`);\r\n})\r\n\r\nbtn_home.addEventListener('click', () => {\r\n    Modal.close_all_modals();\r\n});\r\n\r\nmodal_close_btn.forEach((c_btn) => {\r\n    c_btn.addEventListener('click', () => {\r\n        Modal.close_all_modals();\r\n    })\r\n})\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Observer\r\n/////////////////////////////////////\r\nfunction observer() {\r\n\r\n    //* Schaue ob trainin aktiv\r\n    if (training_running) {\r\n        bdy.classList.add('active-training');\r\n        btn_finish.classList.add('active-training');\r\n        //TODO - Training diff hochzählen\r\n\r\n    } else {\r\n        bdy.classList.remove('active-training');\r\n        btn_finish.classList.remove('active-training');\r\n    }\r\n}\r\n\r\n//* Slider\r\n\r\ninpExercise_Repeats.addEventListener('input', () => {\r\n    lbl_exerciseRepeats.innerHTML = inpExercise_Repeats.value;\r\n});\r\ninpExercise_Sets.addEventListener('input', () => {\r\n    lbl_exerciseSets.innerHTML = inpExercise_Sets.value;\r\n});\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - finish training\r\n/////////////////////////////////////\r\nbtn_finish.addEventListener('click', () => {\r\n    finish_training()\r\n})\r\nfunction finish_training() {\r\n    const decision = window.confirm('Soll das Training beendet werden?');\r\n    if (decision) {\r\n        const trainingsdate = new Date(save_Object.training_start)\r\n        const day = trainingsdate.getDate();\r\n        const month = trainingsdate.getMonth() + 1;\r\n        const year = trainingsdate.getFullYear();\r\n        const datum = `${add_zero(day)}.${add_zero(month)}.${year}`;\r\n\r\n        const trainingsEnd_timestamp = new Date();\r\n        const duration = minutesDiff(trainingsEnd_timestamp, trainingsdate);\r\n\r\n\r\n        //* Trainingsobject erstellen und abspeichern\r\n        const new_solved_training = new Training(datum, duration, save_Object.current_training);\r\n        save_Object.trainings.push(new_solved_training)\r\n\r\n        //* alle sets zurücksetzen\r\n        for (let i = 0; i < save_Object.exercises.length; i++) {\r\n            save_Object.exercises[i].solved_sets = 0;\r\n        }\r\n\r\n        //*Reset current training\r\n        save_Object.current_training = [];\r\n\r\n        //* trainingsstart reset\r\n        save_Object.training_start = '';\r\n\r\n        //* set training is running to false\r\n        training_running = false;\r\n        save_Object.training_is_running = false;\r\n\r\n        // * Save into storage\r\n        save_into_storage();\r\n\r\n        const exercArr = new_solved_training.exercises;\r\n        let exerciseInfoArr = '';\r\n        for (let j = 0; j < exercArr.length; j++) {\r\n            const newRow = `\\n ${exercArr[j].name} - ${exercArr[j].solved_sets} x `\r\n            exerciseInfoArr = exerciseInfoArr + newRow;\r\n        }\r\n        //TODO -  replace alert\r\n        alert(`Training beendet \\n Datum: ${datum} \\n\r\n        Zeit: ${duration} \\n\r\n        Übungen: ${exerciseInfoArr}`);\r\n\r\n        //* reload page\r\n        location.reload();\r\n    }\r\n\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Render Trainings\r\n/////////////////////////////////////\r\n\r\nfunction render_trainings() {\r\n    const trainingamount = save_Object.trainings.length - 1;\r\n    trainings_wrapper.innerHTML = '';\r\n    for (let i = trainingamount; i > -1; i--) {\r\n        const title = save_Object.trainings[i].training_date;\r\n        const duration = save_Object.trainings[i].duration;\r\n        const exc = save_Object.trainings[i].exercises;\r\n        const traintingsplace = identify_trainingsplace(exc);\r\n        const tableContainer = createTable(`${title} - ${duration} - ${traintingsplace}`, exc);\r\n        trainings_wrapper.appendChild(tableContainer);\r\n    }\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Identify Trainingsplace\r\n//TODO - Show other Trainingsplace\r\n/////////////////////////////////////\r\nfunction identify_trainingsplace(training) {\r\n    let fitnessstudio = 0;\r\n    let otherTrainingsplace = 0;\r\n    let heimtraining = 0;\r\n\r\n    for(let i = 0; i < training.length; i++) {\r\n        if(training[i].trainingsplace === 'Fitnessstudio') {\r\n            fitnessstudio++\r\n        }else if(training[i].trainingsplace === 'Heimtraining') {\r\n            heimtraining++;\r\n        }else {\r\n            otherTrainingsplace++;\r\n        }\r\n    }\r\n    if(fitnessstudio >= otherTrainingsplace) {\r\n        return 'Fitti';\r\n    }else if(heimtraining > fitnessstudio || heimtraining > otherTrainingsplace) {\r\n        return 'Home';\r\n    }else {\r\n        return 'Kombo'\r\n    }\r\n}\r\n\r\nfunction createTable(title, data, only_exercise) {\r\n    const table = document.createElement(\"table\");\r\n    const header = document.createElement(\"tr\");\r\n    const nameHeaderCell = document.createElement(\"th\");\r\n    const weightHeaderCell = document.createElement(\"th\");\r\n    const repsHeaderCell = document.createElement(\"th\");\r\n    const setsHeaderCell = document.createElement(\"th\");\r\n    const muscleHeaderCell = document.createElement(\"th\");\r\n    nameHeaderCell.appendChild(document.createTextNode(\"Übung\"));\r\n    weightHeaderCell.appendChild(document.createTextNode(\"Gew\"));\r\n    repsHeaderCell.appendChild(document.createTextNode(\"Wdh\"));\r\n    setsHeaderCell.appendChild(document.createTextNode(\"Sätze\"));\r\n    muscleHeaderCell.appendChild(document.createTextNode(\"Muskel\"));\r\n    header.appendChild(nameHeaderCell);\r\n    header.appendChild(weightHeaderCell);\r\n    header.appendChild(repsHeaderCell);\r\n    header.appendChild(setsHeaderCell);\r\n    header.appendChild(muscleHeaderCell);\r\n    table.appendChild(header);\r\n    for (let i = 0; i < data.length; i++) {\r\n        const row = document.createElement(\"tr\");\r\n        const nameCell = document.createElement(\"td\");\r\n        const weightCell = document.createElement(\"td\");\r\n        const repsCell = document.createElement(\"td\");\r\n        const setsCell = document.createElement(\"td\");\r\n        const muscleCell = document.createElement(\"td\");\r\n        nameCell.appendChild(document.createTextNode(data[i].name));\r\n        weightCell.appendChild(document.createTextNode(data[i].weight));\r\n        repsCell.appendChild(document.createTextNode(data[i].repeats));\r\n        setsCell.appendChild(document.createTextNode(data[i].solved_sets));\r\n        muscleCell.appendChild(document.createTextNode(data[i].musclegroup));\r\n        row.appendChild(nameCell);\r\n        row.appendChild(weightCell);\r\n        row.appendChild(repsCell);\r\n        row.appendChild(setsCell);\r\n        row.appendChild(muscleCell);\r\n        table.appendChild(row);\r\n    }\r\n    if (only_exercise) {\r\n        const row = document.createElement(\"tr\");\r\n        const nameCell = document.createElement(\"td\");\r\n        const weightCell = document.createElement(\"td\");\r\n        const repsCell = document.createElement(\"td\");\r\n        const setsCell = document.createElement(\"td\");\r\n        const muscleCell = document.createElement(\"td\");\r\n        nameCell.appendChild(document.createTextNode(data.name));\r\n        weightCell.appendChild(document.createTextNode(data.weight));\r\n        repsCell.appendChild(document.createTextNode(data.repeats));\r\n        setsCell.appendChild(document.createTextNode(data.solved_sets));\r\n        muscleCell.appendChild(document.createTextNode(data.musclegroup));\r\n        row.appendChild(nameCell);\r\n        row.appendChild(weightCell);\r\n        row.appendChild(repsCell);\r\n        row.appendChild(setsCell);\r\n        row.appendChild(muscleCell);\r\n        table.appendChild(row);\r\n    }\r\n    const container = document.createElement(\"div\");\r\n    const heading = document.createElement(\"h2\");\r\n    heading.appendChild(document.createTextNode(title));\r\n    container.appendChild(heading);\r\n    container.appendChild(table);\r\n    return container;\r\n}\r\n\r\n\r\n/////////////////////////////////////\r\n//* ANCHOR - Edit Exercise\r\n/////////////////////////////////////\r\nfunction load_exercise_into_edit() {\r\n    inpExercise_Name.value = selected_Exercise.name;\r\n    inpExercise_Weight.value = selected_Exercise.weight;\r\n    inpExercise_Sets.value = selected_Exercise.sets;\r\n    inpExercise_Repeats.value = selected_Exercise.repeats;\r\n    inpExercise_number.value = selected_Exercise.machineNumber;\r\n    inpExercise_seatSettings.value = selected_Exercise.machine_seat_settings;\r\n    muscle_select.value = selected_Exercise.musclegroup;\r\n    training_Area.value = selected_Exercise.trainingsplace;\r\n    lbl_exerciseRepeats.innerHTML = inpExercise_Repeats.value;\r\n    lbl_exerciseSets.innerHTML = inpExercise_Sets.value;\r\n}\r\n\n\n//# sourceURL=webpack://project-template/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;