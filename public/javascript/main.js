/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scss/style.scss":
/*!*****************************!*\
  !*** ./src/scss/style.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://project-template/./src/scss/style.scss?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_script_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/script.js */ \"./src/js/script.js\");\n/* harmony import */ var _scss_style_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scss/style.scss */ \"./src/scss/style.scss\");\n\n\n\n\n//# sourceURL=webpack://project-template/./src/index.js?");

/***/ }),

/***/ "./src/js/backup.js":
/*!**************************!*\
  !*** ./src/js/backup.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"backup\": () => (/* binding */ backup)\n/* harmony export */ });\nfunction backup(saveobj) {\n\n    //* Add identifier to check on read and set the name\n    const identifier = 'fitness_tracker';\n    \n    saveobj.identifier = identifier;\n\n    /**\n     *      <div id=\"saveJsonBtn\">Backup erstellen</div>\n            <h4>Backup importieren</h4>\n            <input type=\"file\" id=\"uploadJsonBtn\" accept=\".json\" />\n            <div id=\"btn_importBackup\" style=\"display: none;\">Backup einspielen</div>\n            <div class=\"status-label\" id=\"status\"></div>\n     */\n    const statusLabel = document.getElementById('status');\n    const export_btn = document.getElementById('saveJsonBtn');\n    const upload_btn = document.getElementById('uploadJsonBtn');\n    const import_btn = document.getElementById('btn_importBackup');\n    const local_storage_key = 'stored_fitness_saveobj';\n\n    //* Add current date for the file name\n    const dte = new Date();\n    const d = dte.getDate();\n    const m = dte.getMonth() + 1\n    const y = dte.getFullYear();\n    const date = `${d}.${m}.${y}`\n\n\n\n\n    //* ANCHOR - Export File\n    // Funktion zum Speichern der JSON-Datei\n    export_btn.addEventListener('click', () => {\n        try {\n            const json = JSON.stringify(saveobj, null, 2); // JSON konvertieren und formatieren\n            const blob = new Blob([json], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n    \n            // Erstellen eines unsichtbaren Anker-Elements für den Download\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `${identifier}_${date}.json`;\n            document.body.appendChild(a);\n            a.click(); // Automatischer Klick, um die Datei herunterzuladen\n            document.body.removeChild(a); // Entfernen des Anker-Elements\n            URL.revokeObjectURL(url); // Aufräumen der URL\n            statusLabel.innerHTML = 'Backup wurde erfolgreich erstellt';\n            statusLabel.style.color = 'lightgreen';\n        } catch (error) {\n            statusLabel.innerHTML = 'Backup konnte nicht erstellt werden';\n            statusLabel.style.color = 'red';\n        }\n    });\n\n\n\n    //* ANCHOR - Import File\n    let selectedFile = null; // Globale Variable, um die ausgewählte Datei zu speichern\n\n    // Event-Listener für die Dateiauswahl\n    upload_btn.addEventListener('change', function (event) {\n        selectedFile = event.target.files[0]; // Erste ausgewählte Datei speichern\n\n        if (selectedFile) {\n            statusLabel.innerHTML = 'Datei wurde ausgewählt. Klicke auf \"Backup einspielen\", um den Import zu starten.';\n            import_btn.style.display = 'flex';\n            import_btn.style.background = 'green';\n            import_btn.style.color = 'white';\n            statusLabel.style.color = 'white';\n            upload_btn.style.display = 'none';\n        } else {\n            statusLabel.innerHTML = 'Keine Datei ausgewählt.';\n            import_btn.style.display = 'none';\n            statusLabel.style.color = 'red';\n        }\n    });\n\n    //* Event-Listener für den Import-Button\n    import_btn.addEventListener('click', () => {\n        \n        if (selectedFile) {\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                try {\n                    const json = JSON.parse(e.target.result); // JSON parsen\n\n                    if (json.identifier === identifier) {\n                        localStorage.setItem(local_storage_key, JSON.stringify(json));\n                        statusLabel.innerHTML = 'Backup erfolgreich importiert';\n                        statusLabel.style.color = 'lightgreen';\n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 2500);\n                    } else {\n                        statusLabel.innerHTML = 'Backup konnte nicht geladen werden';\n                        statusLabel.style.color = 'red';\n                    }\n                } catch (err) {\n                    statusLabel.innerHTML = 'Backup konnte nicht geladen werden';\n                    statusLabel.style.color = 'red';\n                    console.error(\"Fehler beim Parsen der Datei:\", err);\n                    alert(\"Fehler: Die Datei enthält kein gültiges JSON.\");\n                }\n            };\n            reader.readAsText(selectedFile); // Datei-Inhalt als Text laden\n        } else {\n            statusLabel.innerHTML = 'Bitte wählen Sie zuerst eine Datei aus.';\n            statusLabel.style.color = 'red';\n        }\n    });\n\n}\n\n//# sourceURL=webpack://project-template/./src/js/backup.js?");

/***/ }),

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _backup_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backup.js */ \"./src/js/backup.js\");\n\n\n\n/////////////////////////////////////\n// * Variablen\n/////////////////////////////////////\n//* ANCHOR - Elemente\n\nconst exercise_container = document.getElementById('exercise_container');\nconst btn_add = document.getElementById('btn_add');\nconst btn_saveExercise = document.getElementById('btn_saveExercise');\nconst modal_edit = document.getElementById(\"modal_edit\");\nconst modal_exercise = document.getElementById(\"modal_exercise\");\nconst modal_settings = document.getElementById(\"modal_settings\");\nconst btn_home = document.getElementById(\"btn_home\");\nconst btn_settings = document.getElementById(\"btn_settings\");\nconst btn_open_edit = document.getElementById(\"btn_open_edit\");\nconst modal_close_btn = document.querySelectorAll('.modal_close_btn');\nconst lbl_trainingsname = document.getElementById('lbl_trainingsname');\nconst lbl_weight = document.getElementById('lbl_weight');\nconst lbl_sets = document.getElementById('lbl_sets');\nconst lbl_repeats = document.getElementById('lbl_repeats');\nconst lbl_number = document.getElementById('lbl_number');\nconst lbl_seatsettings = document.getElementById('lbl_seatsettings');\nconst lbl_muscleselect = document.getElementById('lbl_muscleselect');\nconst lbl_donesets = document.getElementById('lbl_donesets');\nconst btn_trackSport = document.getElementById('btn_trackSport');\nconst lbl_trainingsarea = document.getElementById('lbl_trainingsarea');\nconst bdy = document.getElementById('bdy');\nconst btn_finish = document.getElementById('btn_finish');\nconst btn_show_trainings = document.getElementById('btn_show_trainings');\nconst modal_trainings = document.getElementById('modal_trainings');\nconst trainings_wrapper = document.getElementById('trainings_wrapper');\nconst last_training = document.getElementById('last_training');\nconst btn_edit = document.getElementById('btn_edit');\nconst exercise_table = document.getElementById('exercise_table');\nconst lbl_exerciseRepeats = document.getElementById('lbl_exerciseRepeats');\nconst lbl_exerciseSets = document.getElementById('lbl_exerciseSets');\nconst btn_gotoSolvedTrainings = document.getElementById('btn_gotoSolvedTrainings');\nconst change_StatisticYear = document.getElementById('statisticYear_select');\nlet inpExercise_Name = document.getElementById('inpExercise_Name');\nlet inpExercise_Weight = document.getElementById('inpExercise_Weight');\nlet inpExercise_Sets = document.getElementById('inpExercise_Sets');\nlet inpExercise_Repeats = document.getElementById('inpExercise_Repeats');\nlet inpExercise_number = document.getElementById('inpExercise_number');\nlet inpExercise_seatSettings = document.getElementById('inpExercise_seatSettings');\nlet muscle_select = document.getElementById('muscle_select');\nlet training_Area = document.getElementById('training_Area');\nconst active_training_sect = document.getElementById('active_training_sect');\n\n\n\n/////////////////////////////////////\n//* ANCHOR -  Variablen\n/////////////////////////////////////\nlet training_running = false;\nlet training_place_filter = '';\nlet selected_Exercise;\nlet is_edit = false;\n\n/////////////////////////////////////\n//*  Saveobj\n/////////////////////////////////////\nlet save_Object = {\n    training_is_running: false,\n    training_start: '',\n    exercises: [],\n    trainings: [],\n    current_training: [],\n    training_place_filter: '',\n};\n\n\n\n/////////////////////////////////////\n// * ANCHOR - Init\n/////////////////////////////////////\nwindow.onload = () => {\n    load_local_storage();\n    add_years_to_select();\n    setInterval(() => {\n        observer();\n    }, 1000);\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Load Local Storage\n/////////////////////////////////////\nfunction load_local_storage() {\n    if (localStorage.getItem('stored_fitness_saveobj') != '') {\n        try {\n            save_Object = JSON.parse(localStorage.getItem('stored_fitness_saveobj'));\n            (0,_backup_js__WEBPACK_IMPORTED_MODULE_0__.backup)(save_Object);\n        } catch (error) {\n            console.log('Main Error', error);\n            save_Object = {\n                training_is_running: false,\n                training_start: '',\n                exercises: [],\n                trainings: [],\n                current_training: [],\n                training_place_filter: '',\n            };\n            (0,_backup_js__WEBPACK_IMPORTED_MODULE_0__.backup)(save_Object);\n            save_into_storage();\n        }\n\n        try {\n            training_running = save_Object.training_is_running;\n        } catch (error) {\n            console.log('training_running', error);\n        }\n\n        try {\n            training_place_filter = save_Object.training_place_filter;\n        } catch (error) {\n            console.log('training_place_filter', error);\n        }\n\n        try {\n            const last = save_Object.trainings.length - 1;\n\n            const today = new Date();\n            const last_trainingsdate_Raw = save_Object.trainings[last].training_date\n            const lastTrainingDay = splitVal(last_trainingsdate_Raw, '.', 0);\n            const lastTrainingMonth = splitVal(last_trainingsdate_Raw, '.', 1);\n            const lastTrainingYear = splitVal(last_trainingsdate_Raw, '.', 2);\n            const lastTrainingDate = new Date(`${lastTrainingYear}-${lastTrainingMonth}-${lastTrainingDay}`)\n            const time_to_last_training = daysDiff(today, lastTrainingDate);\n\n            if (time_to_last_training > 1) {\n                last_training.innerHTML = `${save_Object.trainings[last].training_date} -- ${save_Object.trainings[last].duration} <br> Zuletzt vor ${time_to_last_training}. Tag(en)`;\n            } else {\n                last_training.innerHTML = `${save_Object.trainings[last].training_date} -- ${save_Object.trainings[last].duration} <br> Zuletzt vor ${time_to_last_training}. Tag`;\n            }\n\n        } catch (error) {\n            console.log('last_training', error);\n        }\n\n        setTimeout(() => {\n            //* Render func\n            prepare_render_exercise();\n        }, 500);\n\n        try {\n            fill_chart();\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n    if (save_Object === null) {\n        save_Object = {\n            training_is_running: false,\n            training_start: '',\n            exercises: [],\n            trainings: [],\n            current_training: [],\n            training_place_filter: '',\n        };\n        save_into_storage();\n        console.log('was null');\n    }\n    console.log('saveobj', save_Object);\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Show selected Trainingsyear\n//TODO - The years are currently hard coded in html\n/////////////////////////////////////\nchange_StatisticYear.addEventListener('change', () => {\n    const selected_year = change_StatisticYear.value;\n    fill_chart(selected_year);\n});\n\n/////////////////////////////////////\n//* Add dynamic years, wich contains real trainingdata and not just 2023 and 2024\n/////////////////////////////////////\nfunction add_years_to_select() {\n    \n    const current_time_stamp = new Date();\n    const current_Year = current_time_stamp.getFullYear();\n    const select = document.getElementById('statisticYear_select'); \n    let oldest_year = current_Year;\n    let latest_year = current_Year;\n    try {\n        save_Object.trainings.forEach((training) => {\n            const year = splitVal(training.training_date, '.', 2);\n            if(year < oldest_year) {\n                oldest_year = year;\n            }\n        })\n    }catch(error) {\n        console.log('Error', error);\n    }\n    select.innerHTML = '';\n    for(let i = oldest_year; i <= current_Year; i++) {\n        const option = document.createElement('option');\n        option.value = i;\n        option.innerHTML = i;\n        latest_year = i\n        select.appendChild(option);\n    }\n    change_StatisticYear.value = latest_year;\n    fill_chart(latest_year);\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Render Chart\n/////////////////////////////////////\nfunction fill_chart(selct_year) {\n    let current_time_stamp = new Date();\n    let current_Year = current_time_stamp.getFullYear();\n    const training_counter = document.getElementById('training_counter');\n\n    if (selct_year !== undefined) {\n        current_time_stamp = new Date(`${selct_year}-01-01`);\n        current_Year = current_time_stamp.getFullYear();\n    }\n\n\n\n    let jan = 0;\n    let feb = 0;\n    let mrz = 0;\n    let apr = 0;\n    let mai = 0;\n    let jun = 0;\n    let jul = 0;\n    let aug = 0;\n    let sep = 0;\n    let okt = 0;\n    let nov = 0;\n    let dez = 0;\n    let last_day = '';\n    let sum = 0;\n\n    for (let i = 0; i < save_Object.trainings.length; i++) {\n        const solved_Date = save_Object.trainings[i].training_date;\n        const solved_year = splitVal(solved_Date, '.', 2);\n        const solved_month = splitVal(solved_Date, '.', 1);\n        const solved_day = splitVal(solved_Date, '.', 0);\n        const day_Month = solved_day + solved_month;\n\n        if (solved_year == current_Year && day_Month !== last_day) {\n            last_day = day_Month;\n            sum++;\n\n            switch (solved_month) {\n                case '01':\n                    jan++;\n                    break;\n                case '02':\n                    feb++;\n                    break;\n                case '03':\n                    mrz++;\n                    break;\n                case '04':\n                    apr++;\n                    break;\n                case '05':\n                    mai++;\n                    break;\n                case '06':\n                    jun++;\n                    break;\n                case '07':\n                    jul++;\n                    break;\n                case '08':\n                    aug++;\n                    break;\n                case '09':\n                    sep++;\n                    break;\n                case '10':\n                    okt++;\n                    break;\n                case '11':\n                    nov++;\n                    break;\n                case '12':\n                    dez++;\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    }\n\n    const month_arr = [jan, feb, mrz, apr, mai, jun, jul, aug, sep, okt, nov, dez];\n    const month_Descr_arr = ['Jan', 'Feb', 'Mrz', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'];\n\n    //* find max val;\n    let max_per_month = 0;\n    month_arr.forEach((month) => {\n        if (month > max_per_month) {\n            max_per_month = month;\n        }\n    })\n\n    //* Render Col\n    // max = 100% aka 350px\n    let left = 2;\n    month_arr.forEach((month, index) => {\n        const value_in_pixel = ((month * 350) / max_per_month);\n        const col = `chart_col_${index + 1}`;\n        document.getElementById(col).style.height = `${value_in_pixel}px`;\n        document.getElementById(col).style.left = `${left}%`;\n        document.getElementById(col).innerHTML = month_Descr_arr[index] + `</br> ${month}`;\n        left = left += 8;\n    })\n\n    training_counter.innerHTML = `Bereits <span class=\"training-sum-number\">${sum}</span> Trainingstag(e) im Jahr ${current_Year}`;\n}\n\n/////////////////////////////////////\n//* ANCHOR - Split Function\n/////////////////////////////////////\n\nfunction splitVal(val, marker, pos) {\n    const elem = val.split(marker);\n    const retVal = elem[pos];\n    return retVal;\n}\n\n/////////////////////////////////////\n//* ANCHOR - Save to local Storage\n/////////////////////////////////////\nfunction save_into_storage() {\n    localStorage.setItem('stored_fitness_saveobj', JSON.stringify(save_Object));\n}\n\n\n\n\n/////////////////////////////////////\n//* ANCHOR - Class for training\n/////////////////////////////////////\nclass Training {\n    constructor(training_date, duration, exercises) {\n        this.training_date = training_date;\n        this.duration = duration;\n        this.exercises = exercises;\n    }\n}\n/////////////////////////////////////\n//* ANCHOR - Class for Exercise\n/////////////////////////////////////\nclass Exercise {\n    constructor(exercise_id = rnd_id(), name = 'Leere Übung', weight = '0', sets = 0, repeats = 0, machineNumber = '-', machine_seat_settings = '-', musclegroup = '-', trainingsplace = '-', solved_sets = 0) {\n        this.exercise_id = exercise_id;\n        this.name = name;\n        this.weight = weight;\n        this.sets = sets;\n        this.repeats = repeats;\n        this.machineNumber = machineNumber;\n        this.machine_seat_settings = machine_seat_settings;\n        this.musclegroup = musclegroup;\n        this.trainingsplace = trainingsplace;\n        this.solved_sets = solved_sets;\n    }\n\n    show_exercise_in_console() {\n        console.log(`%c ID=${this.exercise_id}\n        Name = ${this.name} \\n\n        Gewicht = ${this.weight} \\n\n        Sätze = ${this.sets} \\n\n        Wdh = ${this.repeats} \\n\n        Nummer = ${this.machineNumber} \\n\n        Geräteeinstellungen = ${this.machine_seat_settings} \\n\n        Muskelgruppe = ${this.musclegroup} \\n\n        Trainingsort = ${this.trainingsplace} \\n\n        SolvedSets = ${this.solved_sets}`, 'color: green;');\n    }\n\n}\n\n/////////////////////////////////////\n//* ANCHOR - Class for Modal\n/////////////////////////////////////\n\nclass Modal {\n\n    static modal_list = [modal_edit, modal_exercise, modal_settings, modal_trainings];\n\n    static open_modal(modal) {\n        this.close_all_modals();\n        modal.classList.add('active');\n    }\n\n    static close_all_modals() {\n        for (let i = 0; i < this.modal_list.length; i++) {\n            this.modal_list[i].classList.remove('active');\n        }\n    }\n}\n\n/////////////////////////////////////\n//* ANCHOR - Random ID Creator\n/////////////////////////////////////\nfunction rnd_id() {\n    const rndStuff = [\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n        'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '$', '?', '1', '2', '3', '4', '8', '7',\n        '6', '5', '9', '0', '#',\n    ];\n    let key = '';\n    for (let i = 1; i <= 16; i++) {\n        key += rndStuff[parseInt(Math.random() * rndStuff.length)];\n    }\n    return key;\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Render exercises\n/////////////////////////////////////\n\nfunction prepare_render_exercise() {\n    let home_array = [];\n    let fitti_array = [];\n    let combo_array = [];\n    const srcArray = save_Object.exercises;\n\n    srcArray.forEach((exercise) => {\n        if (exercise.trainingsplace === 'Heimtraining') {\n            home_array.push(exercise);\n        }\n        if (exercise.trainingsplace === 'Kombo' || exercise.trainingsplace === '') {\n            combo_array.push(exercise);\n        }\n        if (exercise.trainingsplace === 'Fitnessstudio') {\n            fitti_array.push(exercise);\n        }\n    });\n\n    render_exercises(home_array, 'Heimtraining');\n    render_exercises(combo_array, '');\n    render_exercises(fitti_array, 'Fitnessstudio');\n}\n\n/////////////////////////////////////\n//* ANCHOR - Render exercises\n/////////////////////////////////////\n\nfunction render_exercises(exerc_array, label) {\n    try {\n        if (label.length > 1) {\n            let exercise_place_label = document.createElement('h3');\n            exercise_place_label.innerHTML = label;\n            exercise_place_label.classList.add('exercise-place-label')\n            exercise_container.appendChild(exercise_place_label);\n        }\n\n        for (let i = 0; i < exerc_array.length; i++) {\n            let exercisebtn = document.createElement('div');\n            exercisebtn.classList.add('exercise');\n            let exerciseName = exerc_array[i].name;\n            console.log('exerc_array', exerc_array);\n            if (exerc_array[i].trainingsplace == \"Fitnessstudio\") {\n                exerciseName = `Nr.${exerc_array[i].machineNumber} - ` + exerc_array[i].name;\n            }\n            try {\n                const currentSet = save_Object.current_training[`${indexOfExercise(exerc_array[i], save_Object.current_training)}`].solved_sets;\n                exerciseName = `${exerciseName} (${currentSet}/${exerc_array[i].sets}) <span style=\"margin: 0 10px\"> </span><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-patch-check-fill\" viewBox=\"0 0 16 16\">\n                <path d=\"M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01zm.287 5.984-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708\"/>\n              </svg>`;\n                if (currentSet >= exerc_array[i].sets) {\n                    exercisebtn.classList.add('solved');\n                } else {\n                    exercisebtn.classList.add('half-solved');\n                }\n            } catch (error) {\n                console.log(error);\n            }\n            exercisebtn.innerHTML = exerciseName;\n            exercisebtn.id = exerc_array[i].exercise_id;\n            exercisebtn.addEventListener('click', () => {\n                selected_Exercise = exerc_array[i];\n                open_exercise();\n            })\n\n            exercise_container.appendChild(exercisebtn);\n        }\n    } catch (error) {\n        console.log(error);\n    }\n\n}\n\n/////////////////////////////////////\n//* ANCHOR - Save new Exercise\n/////////////////////////////////////\nbtn_saveExercise.addEventListener('click', () => {\n\n    if (inpExercise_Name.value === '') {\n        return\n    }\n    if (inpExercise_Weight.value === '') {\n        inpExercise_Weight.value = 0;\n    }\n    if (inpExercise_Sets.value === '') {\n        inpExercise_Sets.value = 0;\n    }\n    if (inpExercise_Repeats.value === '') {\n        inpExercise_Repeats.value = 0;\n    }\n    if (inpExercise_number.value === '') {\n        inpExercise_number.value = '-'\n    }\n    if (inpExercise_seatSettings.value === '') {\n        inpExercise_seatSettings.value = '-'\n    }\n    if (muscle_select.value === '') {\n        muscle_select.value = '-';\n    }\n    if (training_Area.value === '') {\n        training_Area.value = '-';\n    }\n\n    if (is_edit) {\n        selected_Exercise.name = inpExercise_Name.value;\n        selected_Exercise.weight = inpExercise_Weight.value;\n        selected_Exercise.sets = inpExercise_Sets.value;\n        selected_Exercise.repeats = inpExercise_Repeats.value;\n        selected_Exercise.machineNumber = inpExercise_number.value;\n        selected_Exercise.machine_seat_settings = inpExercise_seatSettings.value;\n        selected_Exercise.musclegroup = muscle_select.value;\n        selected_Exercise.trainingsplace = training_Area.value;\n    } else {\n        const newExercise = new Exercise(rnd_id(),\n            inpExercise_Name.value,\n            inpExercise_Weight.value,\n            inpExercise_Sets.value,\n            inpExercise_Repeats.value,\n            inpExercise_number.value,\n            inpExercise_seatSettings.value,\n            muscle_select.value,\n            training_Area.value,\n            0\n        );\n        save_Object.exercises.push(newExercise);\n    }\n\n    save_into_storage();\n    location.reload();\n})\n\n\n/////////////////////////////////////\n//* ANCHOR - open Exercise\n/////////////////////////////////////\nfunction open_exercise() {\n    Modal.open_modal(modal_exercise);\n    lbl_trainingsname.innerHTML = selected_Exercise.name;\n    lbl_weight.innerHTML = `${selected_Exercise.weight} Kg`;\n    lbl_sets.innerHTML = `${selected_Exercise.sets}`;\n    lbl_repeats.innerHTML = `${selected_Exercise.repeats}`;\n    lbl_number.innerHTML = `Nr.${selected_Exercise.machineNumber}`;\n    lbl_seatsettings.innerHTML = `${selected_Exercise.machine_seat_settings}`;\n    lbl_muscleselect.innerHTML = `${selected_Exercise.musclegroup}`;\n    lbl_donesets.innerHTML = `0`;\n    try {\n        const currentSet = save_Object.current_training[`${indexOfExercise(selected_Exercise, save_Object.current_training)}`].solved_sets;\n        lbl_donesets.innerHTML = `${currentSet}`;\n    } catch (error) { }\n    lbl_trainingsarea.innerHTML = `${selected_Exercise.trainingsplace}`;\n\n    const trainingamount = save_Object.trainings.length - 1;\n    exercise_table.innerHTML = '';\n\n    for (let i = trainingamount; i > -1; i--) {\n        const title = save_Object.trainings[i].training_date;\n        const duration = save_Object.trainings[i].duration;\n        const exc = save_Object.trainings[i].exercises;\n        let only_ecercise;\n        let is_in = false;\n\n\n        for (let j = 0; j < exc.length; j++) {\n            is_in = false;\n            if (exc[j].exercise_id === selected_Exercise.exercise_id) {\n                is_in = true;\n                only_ecercise = exc[j];\n                break;\n            }\n        }\n        if (is_in === true) {\n            const tableContainer = createTable(`${title} - ${duration}`, only_ecercise, true);\n            exercise_table.appendChild(tableContainer);\n        }\n    }\n\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Tracking\n/////////////////////////////////////\nbtn_trackSport.addEventListener('click', () => {\n    if (training_running === false) {\n\n        const decision = window.confirm('Soll ein Training gestartet werden?')\n        if (decision) {\n            training_running = true;\n            //* Training boolean speichern\n            save_Object.training_is_running = true;\n            //* Training Startzeit ermitteln und speichern\n            const training_start_stamp = new Date();\n            save_Object.training_start = training_start_stamp;\n            //* Set in Training Array speichern\n            add_solved_set();\n\n            // * persistent speichern\n            save_into_storage();\n\n            //TODO -  replace alert\n            alert(\"Ein weiterer Satz wurde hinzugefügt\");\n            location.reload();\n        }\n\n    } else {\n        //* Set in Training Array speichern\n        add_solved_set()\n\n        // * persistent speichern\n        save_into_storage();\n\n        //TODO -  replace alert\n        alert(\"Ein weiterer Satz wurde hinzugefügt\");\n        location.reload();\n    }\n})\n\n/////////////////////////////////////\n//* ANCHOR - Add Solved Set\n/////////////////////////////////////\n\nfunction add_solved_set() {\n    //* Übung in Training Array speichern\n    //* Abgleichen ob bereits vorhanden per id match,\n    //* wenn vorhanden eins hochzählen\n    if (check_exercise_in_currentTraining(selected_Exercise)) {\n        let currentSet = save_Object.current_training[`${indexOfExercise(selected_Exercise, save_Object.current_training)}`].solved_sets;\n        let new_set_amount = currentSet += 1;\n        save_Object.current_training[`${indexOfExercise(selected_Exercise, save_Object.current_training)}`].solved_sets = new_set_amount;\n        lbl_donesets.innerHTML = `${new_set_amount}`;\n    } else {\n        //* wenn nein, in das Array übertragen und eins hochzählen\n        let cloned_exercise = Object.assign({}, selected_Exercise);\n        cloned_exercise.solved_sets = cloned_exercise.solved_sets += 1;\n        save_Object.current_training.push(cloned_exercise);\n        lbl_donesets.innerHTML = `${cloned_exercise.solved_sets}`;\n    }\n}\n\n/////////////////////////////////////\n//* ANCHOR - check Exercise in current Training\n/////////////////////////////////////\n\nfunction check_exercise_in_currentTraining(exercise) {\n    const exerciseId = exercise.exercise_id;\n    let is_in_currentTraining = false;\n\n    for (let i = 0; i < save_Object.current_training.length; i++) {\n        if (save_Object.current_training[i].exercise_id === exerciseId) {\n            is_in_currentTraining = true;\n            break;\n        }\n    }\n\n    return is_in_currentTraining;\n}\n\n/////////////////////////////////////\n//* ANCHOR - Index of Exercise\n/////////////////////////////////////\n\nfunction indexOfExercise(exercise, arr) {\n    const exerciseId = exercise.exercise_id;\n    let index = -1;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].exercise_id === exerciseId) {\n            index = i;\n            break;\n        }\n    }\n\n    return index;\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - MinutesDiff\n/////////////////////////////////////\nfunction minutesDiff(dateTimeValue2, dateTimeValue1) {\n    var differenceValue = (dateTimeValue2.getTime() - dateTimeValue1.getTime()) / 1000;\n    differenceValue /= 60;\n    const rawMinuteTime = Math.abs(Math.round(differenceValue))\n    const hour = Math.floor(rawMinuteTime / 60);\n    const minutes = Math.floor(rawMinuteTime % 60);\n    const time = `${add_zero(hour)}:${add_zero(minutes)}`;\n    return time;\n}\n\n/////////////////////////////////////\n//* ANCHOR - Add Zero\n/////////////////////////////////////\nfunction add_zero(val) {\n    if (val < 10) {\n        val = `0${val}`;\n    }\n    return val;\n}\n\n/////////////////////////////////////\n//* ANCHOR - Time between Dates\n/////////////////////////////////////\nfunction daysDiff(dateTimeValue2, dateTimeValue1) {\n    var differenceValue = (dateTimeValue2.getTime() - dateTimeValue1.getTime()) / (1000 * 60 * 60 * 24);\n    const days = Math.floor(Math.abs(differenceValue));\n    return days;\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Modals\n/////////////////////////////////////\n\nbtn_open_edit.addEventListener('click', () => {\n    Modal.open_modal(modal_edit);\n    is_edit = false;\n});\n\nbtn_edit.addEventListener('click', () => {\n    is_edit = true;\n    Modal.open_modal(modal_edit);\n    load_exercise_into_edit();\n});\n\n\nbtn_add.addEventListener('click', () => {\n    Modal.open_modal(modal_edit);\n    is_edit = false;\n});\n\nbtn_show_trainings.addEventListener('click', () => {\n    Modal.open_modal(modal_trainings);\n    render_trainings();\n})\n\nbtn_gotoSolvedTrainings.addEventListener('click', () => {\n    Modal.open_modal(modal_trainings);\n    render_trainings();\n    console.log('%c Feffe', `color: green; font-weight: bold; font-size: 20px;`);\n})\n\nbtn_home.addEventListener('click', () => {\n    Modal.close_all_modals();\n});\n\nbtn_settings.addEventListener('click', () => {\n    Modal.open_modal(modal_settings);\n});\n\nmodal_close_btn.forEach((c_btn) => {\n    c_btn.addEventListener('click', () => {\n        Modal.close_all_modals();\n    })\n})\n\n\n/////////////////////////////////////\n//* ANCHOR - Observer\n/////////////////////////////////////\nfunction observer() {\n\n    //* Schaue ob trainin aktiv\n    if (training_running) {\n        bdy.classList.add('active-training');\n        btn_finish.classList.add('active-training');\n        //* Show Active Training section\n        active_training_sect.classList.add('active');\n        //* Update Time Label\n        const trainingsdate = new Date(save_Object.training_start)\n        const trainingsEnd_timestamp = new Date();\n        const duration = minutesDiff(trainingsEnd_timestamp, trainingsdate);\n        document.getElementById('lbl_time').innerHTML = `Zeit: ${duration}`;\n        //*Update solved sets\n        document.getElementById('lbl_overview_sets').innerHTML = `Absolvierte Sätze: ${sum_of_sets()}`\n        //*Update moved Weight     \n        document.getElementById('lbl_overview_weight').innerHTML = `Bewegtes Gewicht: ${sum_of_weight(save_Object.current_training).weightWithCommas} Kg`\n\n\n    } else {\n        bdy.classList.remove('active-training');\n        btn_finish.classList.remove('active-training');\n    }\n}\n\n//* ANCHOR - Sum of Sets\nfunction sum_of_sets() {\n    let solvedSets = 0;\n    for(let i = 0; i < save_Object.current_training.length; i++) {\n        solvedSets = solvedSets += save_Object.current_training[i].solved_sets;\n    }\n    return solvedSets;\n}\n\n//* ANCHOR - Sum of sets\nfunction sum_of_weight(training) {\n    \n    let weight = 0;\n\n    for(let i = 0; i < training.length; i++) {\n        const solvedSets = training[i].solved_sets;\n        weight = weight += (training[i].weight * solvedSets * training[i].repeats);\n    }\n\n    const weightWithCommas = numberWithCommas(weight);\n    return {\n        weight: weight,\n        weightWithCommas: weightWithCommas\n    };\n}\n\nfunction numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n}\n\n\n//* Slider\n\ninpExercise_Repeats.addEventListener('input', () => {\n    lbl_exerciseRepeats.innerHTML = inpExercise_Repeats.value;\n});\ninpExercise_Sets.addEventListener('input', () => {\n    lbl_exerciseSets.innerHTML = inpExercise_Sets.value;\n});\n\n/////////////////////////////////////\n//* ANCHOR - finish training\n/////////////////////////////////////\nbtn_finish.addEventListener('click', () => {\n    finish_training()\n})\nfunction finish_training() {\n    const decision = window.confirm('Soll das Training beendet werden?');\n    if (decision) {\n        const trainingsdate = new Date(save_Object.training_start)\n        const day = trainingsdate.getDate();\n        const month = trainingsdate.getMonth() + 1;\n        const year = trainingsdate.getFullYear();\n        const datum = `${add_zero(day)}.${add_zero(month)}.${year}`;\n\n        const trainingsEnd_timestamp = new Date();\n        const duration = minutesDiff(trainingsEnd_timestamp, trainingsdate);\n\n\n        //* Trainingsobject erstellen und abspeichern\n        const new_solved_training = new Training(datum, duration, save_Object.current_training);\n        save_Object.trainings.push(new_solved_training)\n\n        //* alle sets zurücksetzen\n        for (let i = 0; i < save_Object.exercises.length; i++) {\n            save_Object.exercises[i].solved_sets = 0;\n        }\n\n        //*Reset current training\n        save_Object.current_training = [];\n\n        //* trainingsstart reset\n        save_Object.training_start = '';\n\n        //* set training is running to false\n        training_running = false;\n        save_Object.training_is_running = false;\n\n        // * Save into storage\n        save_into_storage();\n\n        const exercArr = new_solved_training.exercises;\n        let exerciseInfoArr = '';\n        for (let j = 0; j < exercArr.length; j++) {\n            const newRow = `\\n ${exercArr[j].name} - ${exercArr[j].solved_sets} x `\n            exerciseInfoArr = exerciseInfoArr + newRow;\n        }\n        //TODO -  replace alert\n        alert(`Training beendet \\n Datum: ${datum} \\n\n        Zeit: ${duration} \\n\n        Übungen: ${exerciseInfoArr}`);\n\n        //* reload page\n        location.reload();\n    }\n\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Render Trainings\n/////////////////////////////////////\n\nfunction render_trainings() {\n    const trainingamount = save_Object.trainings.length - 1;\n    trainings_wrapper.innerHTML = '';\n    let max_weight_sum = {\n        amount: 0,\n        amount_with_comma: '',\n        date: ''\n    }\n    for (let i = trainingamount; i > -1; i--) {\n        const trainingsdate = save_Object.trainings[i].training_date;\n        const duration = save_Object.trainings[i].duration;\n        const exc = save_Object.trainings[i].exercises;\n        const traintingsplace = identify_trainingsplace(exc);\n        //* Trainings weight\n        const training_weight_sum_Int = sum_of_weight(save_Object.trainings[i].exercises).weight;\n        const training_weight_sum = sum_of_weight(save_Object.trainings[i].exercises).weightWithCommas;\n        let trainings_weight_label = '';\n        training_weight_sum > 0 ? trainings_weight_label = ` - Trainingsgewicht: ${training_weight_sum} Kg bewegt` : trainings_weight_label = '';\n        console.log('parseInt(training_weight_sum)', parseInt(training_weight_sum));\n        \n        //*emmit max weight sum\n        if(training_weight_sum_Int > max_weight_sum.amount) {\n            max_weight_sum.amount = training_weight_sum_Int;\n            max_weight_sum.amount_with_comma = training_weight_sum;\n            max_weight_sum.date = trainingsdate;\n        }\n\n        const tableContainer = createTable(`${trainingsdate} - ${duration} - ${traintingsplace} ${trainings_weight_label}`, exc);\n        trainings_wrapper.appendChild(tableContainer);\n        let lbl_time_to_last_training = document.createElement('p');\n        lbl_time_to_last_training.classList.add('between-trainings')\n\n        try {\n            if((i - 1) !== -1) {\n                const last_training = save_Object.trainings[i - 1].training_date;\n                const duration_to_last_training = time_between_dates(trainingsdate, last_training);\n                if(duration_to_last_training > 1) {\n                    lbl_time_to_last_training.innerHTML = `${duration_to_last_training}. Tage seit dem letzten Training`;\n                    trainings_wrapper.appendChild(lbl_time_to_last_training);\n                }else if(duration_to_last_training === 1) {\n                    lbl_time_to_last_training.innerHTML = `${duration_to_last_training}. Tag seit dem letzten Training`;\n                    trainings_wrapper.appendChild(lbl_time_to_last_training);\n                }\n            } \n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n\n    const max_weight_label = document.getElementById('max_weight_label');\n    if(max_weight_sum.amount > 0) {\n        max_weight_label.innerHTML = `Maximal bewegtes Gewicht: <br> ${max_weight_sum.amount_with_comma} Kg am ${max_weight_sum.date}`\n    }\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Identify Trainingsplace\n//TODO - Show other Trainingsplace\n/////////////////////////////////////\nfunction identify_trainingsplace(training) {\n    let fitnessstudio = 0;\n    let otherTrainingsplace = 0;\n    let heimtraining = 0;\n\n    for (let i = 0; i < training.length; i++) {\n        if (training[i].trainingsplace === 'Fitnessstudio') {\n            fitnessstudio++\n        } else if (training[i].trainingsplace === 'Heimtraining') {\n            heimtraining++;\n        } else {\n            otherTrainingsplace++;\n        }\n    }\n    if (fitnessstudio > otherTrainingsplace && fitnessstudio > heimtraining) {\n        return 'Fitti';\n    }\n\n    if (otherTrainingsplace > fitnessstudio && otherTrainingsplace > heimtraining) {\n        return 'Sonstiges';\n    }\n\n    if (heimtraining > fitnessstudio && heimtraining > otherTrainingsplace) {\n        return 'Home';\n    }\n}\n\n/////////////////////////////////////\n//* ANCHOR - Create Table\n/////////////////////////////////////\nfunction createTable(title, data, only_exercise) {\n    const table = document.createElement(\"table\");\n    const header = document.createElement(\"tr\");\n    const nameHeaderCell = document.createElement(\"th\");\n    const weightHeaderCell = document.createElement(\"th\");\n    const repsHeaderCell = document.createElement(\"th\");\n    const setsHeaderCell = document.createElement(\"th\");\n    const muscleHeaderCell = document.createElement(\"th\");\n    nameHeaderCell.appendChild(document.createTextNode(\"Übung\"));\n    weightHeaderCell.appendChild(document.createTextNode(\"Gew\"));\n    repsHeaderCell.appendChild(document.createTextNode(\"Wdh\"));\n    setsHeaderCell.appendChild(document.createTextNode(\"Sätze\"));\n    muscleHeaderCell.appendChild(document.createTextNode(\"Muskel\"));\n    header.appendChild(nameHeaderCell);\n    header.appendChild(weightHeaderCell);\n    header.appendChild(repsHeaderCell);\n    header.appendChild(setsHeaderCell);\n    header.appendChild(muscleHeaderCell);\n    table.appendChild(header);\n    for (let i = 0; i < data.length; i++) {\n        const row = document.createElement(\"tr\");\n        const nameCell = document.createElement(\"td\");\n        const weightCell = document.createElement(\"td\");\n        const repsCell = document.createElement(\"td\");\n        const setsCell = document.createElement(\"td\");\n        const muscleCell = document.createElement(\"td\");\n        nameCell.appendChild(document.createTextNode(data[i].name));\n        weightCell.appendChild(document.createTextNode(data[i].weight));\n        repsCell.appendChild(document.createTextNode(data[i].repeats));\n        setsCell.appendChild(document.createTextNode(data[i].solved_sets));\n        muscleCell.appendChild(document.createTextNode(data[i].musclegroup));\n        row.appendChild(nameCell);\n        row.appendChild(weightCell);\n        row.appendChild(repsCell);\n        row.appendChild(setsCell);\n        row.appendChild(muscleCell);\n        table.appendChild(row);\n    }\n    if (only_exercise) {\n        const row = document.createElement(\"tr\");\n        const nameCell = document.createElement(\"td\");\n        const weightCell = document.createElement(\"td\");\n        const repsCell = document.createElement(\"td\");\n        const setsCell = document.createElement(\"td\");\n        const muscleCell = document.createElement(\"td\");\n        nameCell.appendChild(document.createTextNode(data.name));\n        weightCell.appendChild(document.createTextNode(data.weight));\n        repsCell.appendChild(document.createTextNode(data.repeats));\n        setsCell.appendChild(document.createTextNode(data.solved_sets));\n        muscleCell.appendChild(document.createTextNode(data.musclegroup));\n        row.appendChild(nameCell);\n        row.appendChild(weightCell);\n        row.appendChild(repsCell);\n        row.appendChild(setsCell);\n        row.appendChild(muscleCell);\n        table.appendChild(row);\n    }\n    const container = document.createElement(\"div\");\n    const heading = document.createElement(\"h3\");\n    heading.appendChild(document.createTextNode(title));\n    container.appendChild(heading);\n    container.appendChild(table);\n    return container;\n}\n\n\n/////////////////////////////////////\n//* ANCHOR - Edit Exercise\n/////////////////////////////////////\nfunction load_exercise_into_edit() {\n    inpExercise_Name.value = selected_Exercise.name;\n    inpExercise_Weight.value = selected_Exercise.weight;\n    inpExercise_Sets.value = selected_Exercise.sets;\n    inpExercise_Repeats.value = selected_Exercise.repeats;\n    inpExercise_number.value = selected_Exercise.machineNumber;\n    inpExercise_seatSettings.value = selected_Exercise.machine_seat_settings;\n    muscle_select.value = selected_Exercise.musclegroup;\n    training_Area.value = selected_Exercise.trainingsplace;\n    lbl_exerciseRepeats.innerHTML = inpExercise_Repeats.value;\n    lbl_exerciseSets.innerHTML = inpExercise_Sets.value;\n}\n\n/////////////////////////////////////\n//* ANCHOR - Time between Dates\n/////////////////////////////////////\n\nfunction time_between_dates(newer_date, older_date) {\n    try {\n        // Die Daten müssen im Format \"DD.MM.YYYY\" sein\n        const newerDay = splitVal(newer_date, '.', 0);\n        const newerMonth = splitVal(newer_date, '.', 1);\n        const newerYear = splitVal(newer_date, '.', 2);\n        const newerDateObject = new Date(`${newerYear}-${newerMonth}-${newerDay}`);\n\n        const olderDay = splitVal(older_date, '.', 0);\n        const olderMonth = splitVal(older_date, '.', 1);\n        const olderYear = splitVal(older_date, '.', 2);\n        const olderDateObject = new Date(`${olderYear}-${olderMonth}-${olderDay}`);\n\n        // Berechnung der Differenz in Tagen\n        const time_difference_in_days = daysDiff(newerDateObject, olderDateObject);\n\n        // Ergebnis ausgeben oder weiterverarbeiten\n        return time_difference_in_days;\n\n    } catch (error) {\n        console.log('time_between_dates', error);\n    }\n}\n\n//# sourceURL=webpack://project-template/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;